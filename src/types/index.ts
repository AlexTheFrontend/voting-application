// Core types for the voting application

export interface Submission {
  id: string;
  name: string;
  email: string;
  language: string;
  reason: string;
  timeSubmitted: string; // ISO string, generated by backend
}

export interface FormState {
  name: string;
  email: string;
  language: string;
  reason: string;
  isLoading: boolean;
  error: string | null;
  successMessage: string | null;
}

export interface ResultsState {
  totalVotes: number;
  languageCounts: { [key: string]: number };
  languagePercentages: { [key: string]: number };
  allSubmissions: Submission[];
  groupedSubmissions: { [key: string]: Submission[] };
  isLoading: boolean;
  error: string | null;
}

export interface RootState {
  form: FormState;
  results: ResultsState;
}

// API Response types
export interface SubmissionResponse {
  success: boolean;
  message: string;
  submissionId?: string;
}

export interface ResultsResponse {
  languageCounts: { [key: string]: number };
  totalVotes: number;
  allSubmissions: Submission[];
}

// Component Props types
export interface ButtonProps {
  children: React.ReactNode;
  onClick?: () => void;
  type?: 'button' | 'submit' | 'reset';
  variant?: 'primary' | 'secondary';
  disabled?: boolean;
  className?: string;
}

export interface InputProps {
  id: string;
  name: string;
  type?: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  required?: boolean;
  error?: string;
  disabled?: boolean;
  className?: string;
}

export interface SelectProps {
  id: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  options: Array<{ value: string; label: string }>;
  placeholder?: string;
  required?: boolean;
  error?: string;
  disabled?: boolean;
  className?: string;
}

export interface TextAreaProps {
  id: string;
  name: string;
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  required?: boolean;
  error?: string;
  disabled?: boolean;
  rows?: number;
  className?: string;
}